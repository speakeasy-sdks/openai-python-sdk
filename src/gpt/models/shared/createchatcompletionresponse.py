"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import chatcompletionresponsemessage as shared_chatcompletionresponsemessage
from ..shared import completionusage as shared_completionusage
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import Optional

class CreateChatCompletionResponseChoicesFinishReason(str, Enum):
    r"""The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    `length` if the maximum number of tokens specified in the request was reached, or `function_call` if the model called a function.
    """
    STOP = 'stop'
    LENGTH = 'length'
    FUNCTION_CALL = 'function_call'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateChatCompletionResponseChoices:
    finish_reason: CreateChatCompletionResponseChoicesFinishReason = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finish_reason') }})
    r"""The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,
    `length` if the maximum number of tokens specified in the request was reached, or `function_call` if the model called a function.
    """
    index: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('index') }})
    r"""The index of the choice in the list of choices."""
    message: shared_chatcompletionresponsemessage.ChatCompletionResponseMessage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""A chat completion message generated by the model."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class CreateChatCompletionResponse:
    r"""Represents a chat completion response returned by model, based on the provided input."""
    choices: list[CreateChatCompletionResponseChoices] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('choices') }})
    r"""A list of chat completion choices. Can be more than one if `n` is greater than 1."""
    created: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created') }})
    r"""The Unix timestamp (in seconds) of when the chat completion was created."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""A unique identifier for the chat completion."""
    model: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""The model used for the chat completion."""
    object: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object') }})
    r"""The object type, which is always `chat.completion`."""
    usage: Optional[shared_completionusage.CompletionUsage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('usage'), 'exclude': lambda f: f is None }})
    r"""Usage statistics for the completion request."""
    

