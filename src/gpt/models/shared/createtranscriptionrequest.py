"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from enum import Enum
from typing import Optional, Union


@dataclasses.dataclass
class CreateTranscriptionRequestFile:
    content: bytes = dataclasses.field(metadata={'multipart_form': { 'content': True }})
    file: str = dataclasses.field(metadata={'multipart_form': { 'field_name': 'file' }})
    


class CreateTranscriptionRequestModel2(str, Enum):
    r"""ID of the model to use. Only `whisper-1` is currently available."""
    WHISPER_1 = 'whisper-1'


@dataclasses.dataclass
class CreateTranscriptionRequestModel:
    pass

class CreateTranscriptionRequestResponseFormat(str, Enum):
    r"""The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt."""
    JSON = 'json'
    TEXT = 'text'
    SRT = 'srt'
    VERBOSE_JSON = 'verbose_json'
    VTT = 'vtt'


@dataclasses.dataclass
class CreateTranscriptionRequest:
    file: CreateTranscriptionRequestFile = dataclasses.field(metadata={'multipart_form': { 'file': True }})
    r"""The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm."""
    model: Union[str, CreateTranscriptionRequestModel2] = dataclasses.field(metadata={'multipart_form': { 'field_name': 'model' }})
    r"""ID of the model to use. Only `whisper-1` is currently available."""
    language: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'language' }})
    r"""The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency."""
    prompt: Optional[str] = dataclasses.field(default=None, metadata={'multipart_form': { 'field_name': 'prompt' }})
    r"""An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text/prompting) should match the audio language."""
    response_format: Optional[CreateTranscriptionRequestResponseFormat] = dataclasses.field(default=CreateTranscriptionRequestResponseFormat.JSON, metadata={'multipart_form': { 'field_name': 'response_format' }})
    r"""The format of the transcript output, in one of these options: json, text, srt, verbose_json, or vtt."""
    temperature: Optional[float] = dataclasses.field(default=0, metadata={'multipart_form': { 'field_name': 'temperature' }})
    r"""The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit."""
    

