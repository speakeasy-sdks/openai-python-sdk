"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import List, Optional, Union

class RunStepObjectCode(str, Enum):
    r"""One of `server_error` or `rate_limit_exceeded`."""
    SERVER_ERROR = 'server_error'
    RATE_LIMIT_EXCEEDED = 'rate_limit_exceeded'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RunStepObjectLastError:
    r"""The last error associated with this run step. Will be `null` if there are no errors."""
    code: RunStepObjectCode = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""One of `server_error` or `rate_limit_exceeded`."""
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""A human-readable description of the error."""
    



@dataclasses.dataclass
class RunStepObjectMetadata:
    r"""Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long."""
    


class RunStepObjectObject(str, Enum):
    r"""The object type, which is always `assistant.run.step``."""
    ASSISTANT_RUN_STEP = 'assistant.run.step'

class RunStepObjectStatus(str, Enum):
    r"""The status of the run, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`."""
    IN_PROGRESS = 'in_progress'
    CANCELLED = 'cancelled'
    FAILED = 'failed'
    COMPLETED = 'completed'
    EXPIRED = 'expired'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasRunStepDetailsToolCallsFunctionObjectFunction:
    r"""The definition of the function that was called."""
    arguments: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arguments') }})
    r"""The arguments passed to the function."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the function."""
    output: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('output') }})
    r"""The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet."""
    


class SchemasRunStepDetailsToolCallsFunctionObjectType(str, Enum):
    r"""The type of tool call. This is always going to be `function` for this type of tool call."""
    FUNCTION = 'function'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FunctionToolCall:
    function: SchemasRunStepDetailsToolCallsFunctionObjectFunction = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('function') }})
    r"""The definition of the function that was called."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID of the tool call object."""
    type: SchemasRunStepDetailsToolCallsFunctionObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of tool call. This is always going to be `function` for this type of tool call."""
    



@dataclasses.dataclass
class Retrieval:
    r"""For now, this is always going to be an empty object."""
    


class SchemasRunStepDetailsToolCallsRetrievalObjectType(str, Enum):
    r"""The type of tool call. This is always going to be `retrieval` for this type of tool call."""
    RETRIEVAL = 'retrieval'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RetrievalToolCall:
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID of the tool call object."""
    retrieval: Retrieval = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('retrieval') }})
    r"""For now, this is always going to be an empty object."""
    type: SchemasRunStepDetailsToolCallsRetrievalObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of tool call. This is always going to be `retrieval` for this type of tool call."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasImage:
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The [file](/docs/api-reference/files) ID of the image."""
    


class SchemasRunStepDetailsToolCallsCodeOutputImageObjectType(str, Enum):
    r"""Always `image`."""
    IMAGE = 'image'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeInterpreterImageOutput:
    image: SchemasImage = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image') }})
    type: SchemasRunStepDetailsToolCallsCodeOutputImageObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Always `image`."""
    


class SchemasRunStepDetailsToolCallsCodeOutputLogsObjectType(str, Enum):
    r"""Always `logs`."""
    LOGS = 'logs'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeInterpreterLogOutput:
    r"""Text output from the Code Interpreter tool call as part of a run step."""
    logs: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('logs') }})
    r"""The text output from the Code Interpreter tool call."""
    type: SchemasRunStepDetailsToolCallsCodeOutputLogsObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Always `logs`."""
    



@dataclasses.dataclass
class Outputs:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeInterpreter:
    r"""The Code Interpreter tool call definition."""
    input: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input') }})
    r"""The input to the Code Interpreter tool call."""
    outputs: List[Union[CodeInterpreterLogOutput, CodeInterpreterImageOutput]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputs') }})
    r"""The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type."""
    


class SchemasRunStepDetailsToolCallsCodeObjectType(str, Enum):
    r"""The type of tool call. This is always going to be `code_interpreter` for this type of tool call."""
    CODE_INTERPRETER = 'code_interpreter'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeInterpreterToolCall:
    r"""Details of the Code Interpreter tool call the run step was involved in."""
    code_interpreter: CodeInterpreter = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code_interpreter') }})
    r"""The Code Interpreter tool call definition."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The ID of the tool call."""
    type: SchemasRunStepDetailsToolCallsCodeObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of tool call. This is always going to be `code_interpreter` for this type of tool call."""
    



@dataclasses.dataclass
class SchemasToolCalls:
    pass

class SchemasRunStepDetailsToolCallsObjectType(str, Enum):
    r"""Always `tool_calls`."""
    TOOL_CALLS = 'tool_calls'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ToolCalls:
    r"""Details of the tool call."""
    tool_calls: List[Union[CodeInterpreterToolCall, RetrievalToolCall, FunctionToolCall]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tool_calls') }})
    r"""An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `retrieval`, or `function`."""
    type: SchemasRunStepDetailsToolCallsObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Always `tool_calls`."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasMessageCreation:
    message_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_id') }})
    r"""The ID of the message that was created by this run step."""
    


class SchemasRunStepDetailsMessageCreationObjectType(str, Enum):
    r"""Always `message_creation``."""
    MESSAGE_CREATION = 'message_creation'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageCreation:
    r"""Details of the message creation by the run step."""
    message_creation: SchemasMessageCreation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message_creation') }})
    type: SchemasRunStepDetailsMessageCreationObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Always `message_creation``."""
    



@dataclasses.dataclass
class StepDetails:
    pass

class RunStepObjectType(str, Enum):
    r"""The type of run step, which can be either `message_creation` or `tool_calls`."""
    MESSAGE_CREATION = 'message_creation'
    TOOL_CALLS = 'tool_calls'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RunStepObject:
    r"""Represents a step in execution of a run."""
    assistant_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assistant_id') }})
    r"""The ID of the [assistant](/docs/api-reference/assistants) associated with the run step."""
    cancelled_at: Optional[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cancelled_at') }})
    r"""The Unix timestamp (in seconds) for when the run step was cancelled."""
    completed_at: Optional[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('completed_at') }})
    r"""The Unix timestamp (in seconds) for when the run step completed."""
    created_at: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""The Unix timestamp (in seconds) for when the run step was created."""
    expired_at: Optional[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('expired_at') }})
    r"""The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired."""
    failed_at: Optional[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('failed_at') }})
    r"""The Unix timestamp (in seconds) for when the run step failed."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The identifier of the run step, which can be referenced in API endpoints."""
    last_error: Optional[RunStepObjectLastError] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('last_error') }})
    r"""The last error associated with this run step. Will be `null` if there are no errors."""
    metadata: Optional[RunStepObjectMetadata] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long."""
    object: RunStepObjectObject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object') }})
    r"""The object type, which is always `assistant.run.step``."""
    run_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run_id') }})
    r"""The ID of the [run](/docs/api-reference/runs) that this run step is a part of."""
    status: RunStepObjectStatus = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The status of the run, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`."""
    step_details: Union[MessageCreation, ToolCalls] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('step_details') }})
    r"""The details of the run step."""
    thread_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thread_id') }})
    r"""The ID of the [thread](/docs/api-reference/threads) that was run."""
    type: RunStepObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of run step, which can be either `message_creation` or `tool_calls`."""
    

