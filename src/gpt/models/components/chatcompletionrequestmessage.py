"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .chatcompletionmessagetoolcall import ChatCompletionMessageToolCall
from .chatcompletionrequestmessagecontentpart import ImageContentPart, TextContentPart
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import List, Optional, Union

class SchemasRole(str, Enum):
    r"""The role of the messages author, in this case `function`."""
    FUNCTION = 'function'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FunctionMessage:
    r"""Deprecated class: This will be removed in a future release, please migrate away from it as soon as possible."""
    content: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The contents of the function message."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the function to call."""
    role: SchemasRole = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""The role of the messages author, in this case `function`."""
    


class SchemasChatCompletionRequestToolMessageRole(str, Enum):
    r"""The role of the messages author, in this case `tool`."""
    TOOL = 'tool'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ToolMessage:
    content: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The contents of the tool message."""
    role: SchemasChatCompletionRequestToolMessageRole = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""The role of the messages author, in this case `tool`."""
    tool_call_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tool_call_id') }})
    r"""Tool call that this message is responding to."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FunctionCall:
    r"""Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.

    Deprecated class: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    arguments: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('arguments') }})
    r"""The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the function to call."""
    


class Role(str, Enum):
    r"""The role of the messages author, in this case `assistant`."""
    ASSISTANT = 'assistant'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssistantMessage:
    content: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The contents of the assistant message."""
    role: Role = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""The role of the messages author, in this case `assistant`."""
    function_call: Optional[FunctionCall] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('function_call'), 'exclude': lambda f: f is None }})
    r"""Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.

    Deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
    """
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    tool_calls: Optional[List[ChatCompletionMessageToolCall]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tool_calls'), 'exclude': lambda f: f is None }})
    r"""The tool calls generated by the model, such as function calls."""
    


class SchemasChatCompletionRequestUserMessageRole(str, Enum):
    r"""The role of the messages author, in this case `user`."""
    USER = 'user'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class UserMessage:
    content: Optional[Union[str, List[Union[TextContentPart, ImageContentPart]]]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The contents of the user message."""
    role: SchemasChatCompletionRequestUserMessageRole = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""The role of the messages author, in this case `user`."""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    


class SchemasChatCompletionRequestSystemMessageRole(str, Enum):
    r"""The role of the messages author, in this case `system`."""
    SYSTEM = 'system'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SystemMessage:
    content: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The contents of the system message."""
    role: SchemasChatCompletionRequestSystemMessageRole = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""The role of the messages author, in this case `system`."""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    

