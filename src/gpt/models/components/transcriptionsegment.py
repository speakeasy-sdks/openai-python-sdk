"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from gpt import utils
from typing import List


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TranscriptionSegment:
    avg_logprob: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('avg_logprob') }})
    r"""Average logprob of the segment. If the value is lower than -1, consider the logprobs failed."""
    compression_ratio: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('compression_ratio') }})
    r"""Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed."""
    end: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end') }})
    r"""End time of the segment in seconds."""
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""Unique identifier of the segment."""
    no_speech_prob: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('no_speech_prob') }})
    r"""Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent."""
    seek: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('seek') }})
    r"""Seek offset of the segment."""
    start: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start') }})
    r"""Start time of the segment in seconds."""
    temperature: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('temperature') }})
    r"""Temperature parameter used for generating the segment."""
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""Text content of the segment."""
    tokens: List[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tokens') }})
    r"""Array of token IDs for the text content."""
    

