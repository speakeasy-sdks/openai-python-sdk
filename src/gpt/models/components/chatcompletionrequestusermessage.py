"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .chatcompletionrequestmessagecontentpartimage import ChatCompletionRequestMessageContentPartImage
from .chatcompletionrequestmessagecontentparttext import ChatCompletionRequestMessageContentPartText
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import List, Optional, Union

class ChatCompletionRequestUserMessageRole(str, Enum):
    r"""The role of the messages author, in this case `user`."""
    USER = 'user'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ChatCompletionRequestUserMessage:
    content: Union[str, List[Union[ChatCompletionRequestMessageContentPartText, ChatCompletionRequestMessageContentPartImage]]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The contents of the user message."""
    role: ChatCompletionRequestUserMessageRole = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""The role of the messages author, in this case `user`."""
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    r"""An optional name for the participant. Provides the model information to differentiate between participants of the same role."""
    

