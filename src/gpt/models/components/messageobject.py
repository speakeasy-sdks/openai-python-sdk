"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import List, Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasFilePath:
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The ID of the file that was generated."""
    


class SchemasMessageContentTextAnnotationsFilePathObjectType(str, Enum):
    r"""Always `file_path`."""
    FILE_PATH = 'file_path'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FilePath:
    r"""A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file."""
    end_index: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_index') }})
    file_path: SchemasFilePath = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_path') }})
    start_index: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_index') }})
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""The text in the message content that needs to be replaced."""
    type: SchemasMessageContentTextAnnotationsFilePathObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Always `file_path`."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasFileCitation:
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The ID of the specific File the citation is from."""
    quote: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quote') }})
    r"""The specific quote in the file."""
    


class SchemasMessageContentTextAnnotationsFileCitationObjectType(str, Enum):
    r"""Always `file_citation`."""
    FILE_CITATION = 'file_citation'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FileCitation:
    r"""A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the \\"retrieval\\" tool to search files."""
    end_index: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('end_index') }})
    file_citation: SchemasFileCitation = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_citation') }})
    start_index: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('start_index') }})
    text: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    r"""The text in the message content that needs to be replaced."""
    type: SchemasMessageContentTextAnnotationsFileCitationObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Always `file_citation`."""
    



@dataclasses.dataclass
class Annotations:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasText:
    annotations: List[Union[FileCitation, FilePath]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotations') }})
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The data that makes up the text."""
    


class SchemasMessageContentTextObjectType(str, Enum):
    r"""Always `text`."""
    TEXT = 'text'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Text:
    r"""The text content that is part of a message."""
    text: SchemasText = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    type: SchemasMessageContentTextObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Always `text`."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class SchemasImageFile:
    file_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_id') }})
    r"""The [File](/docs/api-reference/files) ID of the image in the message content."""
    


class SchemasMessageContentImageFileObjectType(str, Enum):
    r"""Always `image_file`."""
    IMAGE_FILE = 'image_file'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ImageFile:
    r"""References an image [File](/docs/api-reference/files) in the content of a message."""
    image_file: SchemasImageFile = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('image_file') }})
    type: SchemasMessageContentImageFileObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Always `image_file`."""
    



@dataclasses.dataclass
class MessageObjectContent:
    pass


@dataclasses.dataclass
class MessageObjectMetadata:
    r"""Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long."""
    


class MessageObjectObject(str, Enum):
    r"""The object type, which is always `thread.message`."""
    THREAD_MESSAGE = 'thread.message'

class MessageObjectRole(str, Enum):
    r"""The entity that produced the message. One of `user` or `assistant`."""
    USER = 'user'
    ASSISTANT = 'assistant'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageObject:
    r"""Represents a message within a [thread](/docs/api-reference/threads)."""
    assistant_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assistant_id') }})
    r"""If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message."""
    content: List[Union[ImageFile, Text]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('content') }})
    r"""The content of the message in array of text and/or images."""
    created_at: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""The Unix timestamp (in seconds) for when the message was created."""
    file_ids: List[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_ids') }})
    r"""A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The identifier, which can be referenced in API endpoints."""
    metadata: Optional[MessageObjectMetadata] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long."""
    object: MessageObjectObject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object') }})
    r"""The object type, which is always `thread.message`."""
    role: MessageObjectRole = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    r"""The entity that produced the message. One of `user` or `assistant`."""
    run_id: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('run_id') }})
    r"""If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message."""
    thread_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('thread_id') }})
    r"""The [thread](/docs/api-reference/threads) ID that this message belongs to."""
    

