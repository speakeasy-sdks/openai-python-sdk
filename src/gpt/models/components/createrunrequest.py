"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import Any, Dict, List, Optional, Union


@dataclasses.dataclass
class CreateRunRequestMetadata:
    r"""Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Function:
    r"""The function definition."""
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description of what the function does, used by the model to choose when and how to call the function."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    parameters: Dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters') }})
    r"""The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.

    To describe a function that accepts no parameters, provide the value `{\"type\": \"object\", \"properties\": {}}`.
    """
    


class SchemasType(str, Enum):
    r"""The type of tool being defined: `function`"""
    FUNCTION = 'function'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FunctionTool:
    function: Function = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('function') }})
    r"""The function definition."""
    type: SchemasType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of tool being defined: `function`"""
    


class SchemasAssistantToolsRetrievalType(str, Enum):
    r"""The type of tool being defined: `retrieval`"""
    RETRIEVAL = 'retrieval'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RetrievalTool:
    type: SchemasAssistantToolsRetrievalType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of tool being defined: `retrieval`"""
    


class Type(str, Enum):
    r"""The type of tool being defined: `code_interpreter`"""
    CODE_INTERPRETER = 'code_interpreter'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeInterpreterTool:
    type: Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of tool being defined: `code_interpreter`"""
    



@dataclasses.dataclass
class CreateRunRequestTools:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateRunRequest:
    assistant_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('assistant_id') }})
    r"""The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run."""
    instructions: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructions') }})
    r"""Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis."""
    metadata: Optional[CreateRunRequestMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long."""
    model: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used."""
    tools: Optional[List[Union[CodeInterpreterTool, RetrievalTool, FunctionTool]]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tools') }})
    r"""Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis."""
    

