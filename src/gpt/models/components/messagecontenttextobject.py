"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .messagecontenttextannotationsfilecitationobject import MessageContentTextAnnotationsFileCitationObject
from .messagecontenttextannotationsfilepathobject import MessageContentTextAnnotationsFilePathObject
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import List, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Text:
    annotations: List[Union[MessageContentTextAnnotationsFileCitationObject, MessageContentTextAnnotationsFilePathObject]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('annotations') }})
    value: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('value') }})
    r"""The data that makes up the text."""
    


class MessageContentTextObjectType(str, Enum):
    r"""Always `text`."""
    TEXT = 'text'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class MessageContentTextObject:
    r"""The text content that is part of a message."""
    text: Text = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('text') }})
    type: MessageContentTextObjectType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Always `text`."""
    

