"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import Any, Dict, List, Optional, Union


@dataclasses.dataclass
class Metadata:
    r"""Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long."""
    


class AssistantObjectObject(str, Enum):
    r"""The object type, which is always `assistant`."""
    ASSISTANT = 'assistant'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Function:
    r"""The function definition."""
    description: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""A description of what the function does, used by the model to choose when and how to call the function."""
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64."""
    parameters: Dict[str, Any] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('parameters') }})
    r"""The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/gpt/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.

    To describe a function that accepts no parameters, provide the value `{\"type\": \"object\", \"properties\": {}}`.
    """
    


class SchemasType(str, Enum):
    r"""The type of tool being defined: `function`"""
    FUNCTION = 'function'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FunctionTool:
    function: Function = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('function') }})
    r"""The function definition."""
    type: SchemasType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of tool being defined: `function`"""
    


class SchemasAssistantToolsRetrievalType(str, Enum):
    r"""The type of tool being defined: `retrieval`"""
    RETRIEVAL = 'retrieval'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class RetrievalTool:
    type: SchemasAssistantToolsRetrievalType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of tool being defined: `retrieval`"""
    


class Type(str, Enum):
    r"""The type of tool being defined: `code_interpreter`"""
    CODE_INTERPRETER = 'code_interpreter'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CodeInterpreterTool:
    type: Type = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""The type of tool being defined: `code_interpreter`"""
    



@dataclasses.dataclass
class Tools:
    pass


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AssistantObject:
    r"""Represents an `assistant` that can call the model and use tools."""
    created_at: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""The Unix timestamp (in seconds) for when the assistant was created."""
    description: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description') }})
    r"""The description of the assistant. The maximum length is 512 characters."""
    file_ids: List[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('file_ids') }})
    r"""A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The identifier, which can be referenced in API endpoints."""
    instructions: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('instructions') }})
    r"""The system instructions that the assistant uses. The maximum length is 32768 characters."""
    metadata: Optional[Metadata] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    r"""Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long."""
    model: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models/overview) for descriptions of them."""
    name: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    r"""The name of the assistant. The maximum length is 256 characters."""
    object: AssistantObjectObject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object') }})
    r"""The object type, which is always `assistant`."""
    tools: List[Union[CodeInterpreterTool, RetrievalTool, FunctionTool]] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tools') }})
    r"""A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `retrieval`, or `function`."""
    

