"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import List, Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Error:
    r"""For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure."""
    code: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('code') }})
    r"""A machine-readable error code."""
    message: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""A human-readable error message."""
    param: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('param') }})
    r"""The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific."""
    


class FineTuningJob1(str, Enum):
    r"""The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
    \"auto\" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
    """
    AUTO = 'auto'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FineTuningJobHyperparameters:
    r"""The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details."""
    n_epochs: Union[FineTuningJob1, int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('n_epochs') }})
    r"""The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.
    \"auto\" decides the optimal number of epochs based on the size of the dataset. If setting the number manually, we support any number between 1 and 50 epochs.
    """
    


class FineTuningJobObject(str, Enum):
    r"""The object type, which is always \\"fine_tuning.job\\"."""
    FINE_TUNING_JOB = 'fine_tuning.job'

class Status(str, Enum):
    r"""The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`."""
    VALIDATING_FILES = 'validating_files'
    QUEUED = 'queued'
    RUNNING = 'running'
    SUCCEEDED = 'succeeded'
    FAILED = 'failed'
    CANCELLED = 'cancelled'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class FineTuningJob:
    r"""The `fine_tuning.job` object represents a fine-tuning job that has been created through the API."""
    created_at: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('created_at') }})
    r"""The Unix timestamp (in seconds) for when the fine-tuning job was created."""
    error: Optional[Error] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error') }})
    r"""For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure."""
    fine_tuned_model: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fine_tuned_model') }})
    r"""The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running."""
    finished_at: Optional[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('finished_at') }})
    r"""The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running."""
    hyperparameters: FineTuningJobHyperparameters = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hyperparameters') }})
    r"""The hyperparameters used for the fine-tuning job. See the [fine-tuning guide](/docs/guides/fine-tuning) for more details."""
    id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    r"""The object identifier, which can be referenced in the API endpoints."""
    model: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""The base model that is being fine-tuned."""
    object: FineTuningJobObject = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('object') }})
    r"""The object type, which is always \\"fine_tuning.job\\"."""
    organization_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('organization_id') }})
    r"""The organization that owns the fine-tuning job."""
    result_files: List[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('result_files') }})
    r"""The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents)."""
    status: Status = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status') }})
    r"""The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`."""
    trained_tokens: Optional[int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('trained_tokens') }})
    r"""The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running."""
    training_file: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('training_file') }})
    r"""The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents)."""
    validation_file: Optional[str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('validation_file') }})
    r"""The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents)."""
    

