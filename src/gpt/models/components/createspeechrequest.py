"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from gpt import utils
from typing import Optional, Union

class CreateSpeechRequest2(str, Enum):
    r"""One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`"""
    TTS_1 = 'tts-1'
    TTS_1_HD = 'tts-1-hd'


@dataclasses.dataclass
class CreateSpeechRequestModel:
    pass

class CreateSpeechRequestResponseFormat(str, Enum):
    r"""The format to audio in. Supported formats are `mp3`, `opus`, `aac`, and `flac`."""
    MP3 = 'mp3'
    OPUS = 'opus'
    AAC = 'aac'
    FLAC = 'flac'

class Voice(str, Enum):
    r"""The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`."""
    ALLOY = 'alloy'
    ECHO = 'echo'
    FABLE = 'fable'
    ONYX = 'onyx'
    NOVA = 'nova'
    SHIMMER = 'shimmer'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class CreateSpeechRequest:
    input: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input') }})
    r"""The text to generate audio for. The maximum length is 4096 characters."""
    model: Union[str, CreateSpeechRequest2] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('model') }})
    r"""One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`"""
    voice: Voice = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('voice') }})
    r"""The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`."""
    response_format: Optional[CreateSpeechRequestResponseFormat] = dataclasses.field(default=CreateSpeechRequestResponseFormat.MP3, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response_format'), 'exclude': lambda f: f is None }})
    r"""The format to audio in. Supported formats are `mp3`, `opus`, `aac`, and `flac`."""
    speed: Optional[float] = dataclasses.field(default=1, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('speed'), 'exclude': lambda f: f is None }})
    r"""The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default."""
    

